from scipy.io import loadmat
mat =loadmat('/home/abhinandan/Desktop/ex4data1.mat')
import numpy as np
def sigmoid(z):
    return (1/(1+np.exp(-z)))
def derivative(z):
 return(sigmoid(z)*(1-sigmoid(z)))

x=np.array(mat['X'], np.float64)
y=np.array(mat['y'].reshape(5000,1), np.float64)
for i in range(5000):
    if y[i]==10:
        y[i]=0   
print(y)
x=np.append(np.ones((5000,1)),x,axis=1)
def backwardprop(x,ytrain,weight1,weight2):
    z2=np.dot(x,weight1)
    z2=np.append(np.ones((1,1)),z2,axis=1)
    a2=sigmoid(z2)
    z3=np.dot(a2,weight2)
    a3=sigmoid(z3)
    del3=a3-ytrain
    del2=np.dot(del3,weight2.T)*derivative(z2)
    return del3,del2,a3,a2
weight1=np.random.rand(401,25)*2*0.12-0.12
weight2=np.random.rand(26,10)*2*0.12-0.12
binary_y=[]
classes=np.unique(y)
for c in classes:
    binary_y.append(np.where(y==c,1,0))
binary_y=np.asarray(binary_y)
ytrain=binary_y.T.reshape(5000,10)
delta3=np.zeros((26,10))
delta2=np.zeros((401,25))
for m in range(1000):
 delta3=np.zeros((26,10))
 delta2=np.zeros((401,25))
 for i in  range(5000):
  (del3,del2,a3,a2)=backwardprop(x[i].reshape(1,401),ytrain[i].reshape(1,10),weight1,weight2)
  del2=np.delete(del2,0,axis=1)
  delta3=delta3+np.dot(a2.T,del3)
  delta2=delta2+np.dot(x[i].reshape(1,401).T,del2)
 weight1-=1.3*(delta2/5000)
 weight2-=1.3*(delta3/5000)
 z2=np.dot(x,weight1)
 z2=np.append(np.ones((5000,1)),z2,axis=1)
 a2=sigmoid(z2)
 z3=np.dot(a2,weight2)
 a3=sigmoid(z3)
 difference=(a3-ytrain)**2
 print(difference.mean())
for i in range(5000):
  for j in range(10):
       if a3[i][j]==np.amax(a3[i], axis=0):
                 a3[i][j]=1
       else:
         a3[i][j]=0
print(a3)
predictlabel=np.zeros((5000,1))
for i in range(5000):
    for j in range(10):
        if a3[i][j]==1:
            predictlabel[i]=j
print(predictlabel)        
difference2=predictlabel-y
count=0
for i in range(5000):
 if difference2[i]==0:
   count+=1
print((count/5000)*100)
